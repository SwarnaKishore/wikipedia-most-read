{"version":3,"sources":["MostReadArticleCard.js","App.js","reportWebVitals.js","index.js"],"names":["MostReadArticleCard","article","this","props","contentUrl","content_urls","desktop","page","image","thumbnail","CardMedia","className","source","title","articleViews","Chip","size","icon","label","views","Fragment","rel","href","target","Card","CardActionArea","CardContent","Typography","gutterBottom","variant","component","color","description","Component","App","state","mostReadArticles","selectedDateForArticles","Date","handleDateChange","date","setState","getMostReadArticles","getRequestURL","month","getMonth","toString","length","day","getDate","getFullYear","url","fetch","then","result","json","mostread","articles","console","log","DatePicker","utils","DateFnsUtils","Grid","container","justify","disableToolbar","format","margin","id","value","onChange","KeyboardButtonProps","AppBar","position","Toolbar","noWrap","Container","maxWidth","align","paragraph","CircularProgress","spacing","map","entry","index","item","Link","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1003c230.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport Chip from '@material-ui/core/Chip';\nimport CardActionArea from '@material-ui/core/CardActionArea';\n\nclass MostReadArticleCard extends Component {\n  render() {\n    const {article} = this.props;\n    const contentUrl = article.content_urls && article.content_urls.desktop && article.content_urls.desktop.page ? article.content_urls.desktop.page : '';\n    const image = article.thumbnail && <CardMedia className=\"Card-media\" image={article.thumbnail.source} title={article.title}/>;\n    const articleViews = <Chip size=\"small\" icon={<VisibilityIcon />} label={article.views + ' views'}/>;\n\n  return (\n    <React.Fragment>\n        {(() => {\n            if (image) {\n              return (\n                <a className=\"contentUrl\" rel=\"noreferrer\" href={contentUrl} target=\"_blank\">\n                  <Card className=\"Card\">\n                    <CardActionArea>\n                        {image}\n                        <CardContent>\n                          <Typography className=\"Card-title\" gutterBottom variant=\"h5\" component=\"h2\"> {article.title}</Typography>\n                          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                            {article.description}\n                          </Typography>\n                          <Typography className=\"Card-views\">{articleViews}</Typography>\n                        </CardContent>\n                    </CardActionArea>\n                  </Card>\n                </a>\n              )\n            }\n        })()}\n    </React.Fragment>\n  )\n  }\n}\n\nexport default MostReadArticleCard;","import './App.css';\nimport React, {Component } from 'react';\nimport MostReadArticleCard from './MostReadArticleCard';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Link from '@material-ui/core/Link';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { FcWikipedia } from 'react-icons/fc';\n\nclass App extends Component {\n  state = {\n    mostReadArticles: [],\n    selectedDateForArticles: new Date(),\n  }\n\n  handleDateChange = (date) => {\n    this.setState({\n      selectedDateForArticles: date\n    });\n    // console.log('handleDateChange', this.state.selectedDateForArticles, date, 'date');\n    this.getMostReadArticles(date);\n  };\n\n  componentDidMount() {\n    this.getMostReadArticles(this.state.selectedDateForArticles);\n  }\n\n  getRequestURL = (date) => {\n    let month = (date.getMonth() + 1).toString().length === 1 ? ('0' + (date.getMonth() + 1)) : (date.getMonth() + 1);\n    let day = (date.getDate()).toString().length === 1 ? ('0' + date.getDate()) : date.getDate();\n    return 'https://en.wikipedia.org/api/rest_v1/feed/featured/' + date.getFullYear() + '/' + month + '/' + day;\n  }\n\n  getMostReadArticles = (date) => {\n    const url = this.getRequestURL(date);\n  fetch(url)\n    .then((result) => result.json())\n    .then((result) => {\n      this.setState({\n        mostReadArticles: result.mostread.articles,\n      })\n    // console.log(this.state.mostReadArticles, 'articles');\n    });\n  }\n\n  render() {\n    const {mostReadArticles} = this.state;\n    const {selectedDateForArticles} = this.state;\n    console.log(selectedDateForArticles, mostReadArticles, 'render');\n    const DatePicker = () => {\n      return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container justify=\"space-around\">\n              <KeyboardDatePicker\n                disableToolbar\n                variant=\"inline\"\n                format=\"MM/dd/yyyy\"\n                margin=\"normal\"\n                id=\"date-picker-inline\"\n                label=\"Date picker inline\"\n                value={selectedDateForArticles}\n                onChange={this.handleDateChange}\n                KeyboardButtonProps={{\n                  'aria-label': 'change date',\n                }}\n              />\n            </Grid>\n        </MuiPickersUtilsProvider>\n      )\n    }\n    return (\n      <React.Fragment>\n        <AppBar position=\"relative\" className=\"App-bar\" >\n          <Toolbar>\n          <FcWikipedia className=\"Wiki-icon\"/>\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\n             Wikipedia Most Read\n            </Typography>\n          </Toolbar>\n        </AppBar>\n\n        <Container maxWidth=\"lg\">\n          <Container maxWidth=\"sm\">\n              <Typography component=\"h3\" variant=\"h3\" align=\"center\" color=\"textPrimary\" gutterBottom className=\"App-header\"> \n                  Wikipedia Most Read\n                </Typography>\n                <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n                  Check out Most Read Wikipedia articles for a selected date below.\n              </Typography>\n              <DatePicker />\n          </Container>\n\n          { mostReadArticles && mostReadArticles.length === 0 ?  <CircularProgress /> : '' }\n          <Grid container justify=\"center\" spacing={10} className=\"Articles-container\">\n            {mostReadArticles.map((entry, index) => (\n            <Grid key={index} item>\n              <MostReadArticleCard article={entry}/>\n            </Grid>\n          ))}\n          </Grid>\n        </Container>\n\n        {(() => {\n              if (mostReadArticles.length > 0) {\n                return (\n                  <footer>\n                      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\" className=\"FooterStyle\">\n                        {'Copyright © '}\n                        <Link color=\"inherit\" href=\"https://swarnakishore.github.io/wikipedia-most-read/\">\n                          Wikipedia Most Read\n                        </Link>{' '}\n                        {new Date().getFullYear()}\n                        {'.'}\n                      </Typography>\n                  </footer>\n                )\n              }\n        })()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}